name: Release

on:
  push:
    tags:
      - 'langchain-v*'
      - 'mcp-use-v*'
      - 'gradio-v*'
      - 'smolagents-v*'
  workflow_dispatch:
    inputs:
      package:
        description: 'Package to release'
        required: true
        type: choice
        options:
          - langchain
          - mcp-use
          - gradio
          - smolagents
      version:
        description: 'Version type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  release:
    name: Release Package
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Bun
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: latest
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Install dependencies
      run: bun install
    
    - name: Determine package from tag
      id: package
      if: github.event_name == 'push'
      run: |
        if [[ "${{ github.ref }}" =~ ^refs/tags/langchain-v ]]; then
          echo "package=langchain" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" =~ ^refs/tags/mcp-use-v ]]; then
          echo "package=mcp-use" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" =~ ^refs/tags/gradio-v ]]; then
          echo "package=gradio" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" =~ ^refs/tags/smolagents-v ]]; then
          echo "package=smolagents" >> $GITHUB_OUTPUT
        fi
    
    - name: Build package
      run: |
        PACKAGE=${{ steps.package.outputs.package || github.event.inputs.package }}
        npx nx run $PACKAGE:build
    
    - name: Test package
      run: |
        PACKAGE=${{ steps.package.outputs.package || github.event.inputs.package }}
        npx nx run $PACKAGE:test
    
    - name: Publish to npm
      if: contains('langchain mcp-use', steps.package.outputs.package || github.event.inputs.package)
      run: |
        PACKAGE=${{ steps.package.outputs.package || github.event.inputs.package }}
        cd integrations/$PACKAGE
        npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    
    - name: Publish to PyPI
      if: contains('gradio smolagents', steps.package.outputs.package || github.event.inputs.package)
      run: |
        PACKAGE=${{ steps.package.outputs.package || github.event.inputs.package }}
        cd integrations/$PACKAGE
        pip install build twine
        python -m build
        python -m twine upload dist/*
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}